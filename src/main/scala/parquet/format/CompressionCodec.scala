/**
 * Generated by Scrooge
 *   version: 4.16.0-SNAPSHOT
 *   rev: eb110c820bcd2734b26023f24d636bf6d37511b3
 *   built at: 20170607-185808
 */
package parquet.format

import com.twitter.scrooge.ThriftEnum
import scala.collection.immutable.{Map => immutable$Map}

/**
 * Supported compression algorithms.
 */
@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
case object CompressionCodec {

  val annotations: immutable$Map[String, String] = immutable$Map.empty

  
  case object Uncompressed extends parquet.format.CompressionCodec {
    val value: Int = 0
    val name: String = "Uncompressed"
    val originalName: String = "UNCOMPRESSED"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeUncompressed = _root_.scala.Some(parquet.format.CompressionCodec.Uncompressed)
  
  case object Snappy extends parquet.format.CompressionCodec {
    val value: Int = 1
    val name: String = "Snappy"
    val originalName: String = "SNAPPY"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeSnappy = _root_.scala.Some(parquet.format.CompressionCodec.Snappy)
  
  case object Gzip extends parquet.format.CompressionCodec {
    val value: Int = 2
    val name: String = "Gzip"
    val originalName: String = "GZIP"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeGzip = _root_.scala.Some(parquet.format.CompressionCodec.Gzip)
  
  case object Lzo extends parquet.format.CompressionCodec {
    val value: Int = 3
    val name: String = "Lzo"
    val originalName: String = "LZO"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeLzo = _root_.scala.Some(parquet.format.CompressionCodec.Lzo)
  
  case object Brotli extends parquet.format.CompressionCodec {
    val value: Int = 4
    val name: String = "Brotli"
    val originalName: String = "BROTLI"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeBrotli = _root_.scala.Some(parquet.format.CompressionCodec.Brotli)

  case class EnumUnknownCompressionCodec(value: Int) extends parquet.format.CompressionCodec {
    val name: String = "EnumUnknownCompressionCodec" + value
    def originalName: String = name
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   */
  def apply(value: Int): parquet.format.CompressionCodec =
    value match {
      case 0 => parquet.format.CompressionCodec.Uncompressed
      case 1 => parquet.format.CompressionCodec.Snappy
      case 2 => parquet.format.CompressionCodec.Gzip
      case 3 => parquet.format.CompressionCodec.Lzo
      case 4 => parquet.format.CompressionCodec.Brotli
      case _ => throw new NoSuchElementException(value.toString)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * returns an EnumUnknownCompressionCodec(value) if the value is not found.
   * In particular this allows ignoring new values added to an enum
   * in the IDL on the producer side when the consumer was not updated.
   */
  def getOrUnknown(value: Int): parquet.format.CompressionCodec =
    get(value) match {
      case _root_.scala.Some(e) => e
      case _root_.scala.None => EnumUnknownCompressionCodec(value)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): _root_.scala.Option[parquet.format.CompressionCodec] =
    value match {
      case 0 => _SomeUncompressed
      case 1 => _SomeSnappy
      case 2 => _SomeGzip
      case 3 => _SomeLzo
      case 4 => _SomeBrotli
      case _ => _root_.scala.None
    }

  def valueOf(name: String): _root_.scala.Option[parquet.format.CompressionCodec] =
    name.toLowerCase match {
      case "uncompressed" => _SomeUncompressed
      case "snappy" => _SomeSnappy
      case "gzip" => _SomeGzip
      case "lzo" => _SomeLzo
      case "brotli" => _SomeBrotli
      case _ => _root_.scala.None
    }

  lazy val list: List[parquet.format.CompressionCodec] = scala.List[parquet.format.CompressionCodec](
    parquet.format.CompressionCodec.Uncompressed,
    parquet.format.CompressionCodec.Snappy,
    parquet.format.CompressionCodec.Gzip,
    parquet.format.CompressionCodec.Lzo,
    parquet.format.CompressionCodec.Brotli
  )
}


/**
 * Supported compression algorithms.
 */
@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait CompressionCodec extends ThriftEnum with Serializable