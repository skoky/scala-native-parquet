/**
 * Generated by Scrooge
 *   version: 4.16.0-SNAPSHOT
 *   rev: eb110c820bcd2734b26023f24d636bf6d37511b3
 *   built at: 20170607-185808
 */
package parquet.format

import com.twitter.scrooge.ThriftEnum
import scala.collection.immutable.{Map => immutable$Map}


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
case object PageType {

  val annotations: immutable$Map[String, String] = immutable$Map.empty

  
  case object DataPage extends parquet.format.PageType {
    val value: Int = 0
    val name: String = "DataPage"
    val originalName: String = "DATA_PAGE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeDataPage = _root_.scala.Some(parquet.format.PageType.DataPage)
  
  case object IndexPage extends parquet.format.PageType {
    val value: Int = 1
    val name: String = "IndexPage"
    val originalName: String = "INDEX_PAGE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeIndexPage = _root_.scala.Some(parquet.format.PageType.IndexPage)
  
  case object DictionaryPage extends parquet.format.PageType {
    val value: Int = 2
    val name: String = "DictionaryPage"
    val originalName: String = "DICTIONARY_PAGE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeDictionaryPage = _root_.scala.Some(parquet.format.PageType.DictionaryPage)
  
  case object DataPageV2 extends parquet.format.PageType {
    val value: Int = 3
    val name: String = "DataPageV2"
    val originalName: String = "DATA_PAGE_V2"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeDataPageV2 = _root_.scala.Some(parquet.format.PageType.DataPageV2)

  case class EnumUnknownPageType(value: Int) extends parquet.format.PageType {
    val name: String = "EnumUnknownPageType" + value
    def originalName: String = name
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   */
  def apply(value: Int): parquet.format.PageType =
    value match {
      case 0 => parquet.format.PageType.DataPage
      case 1 => parquet.format.PageType.IndexPage
      case 2 => parquet.format.PageType.DictionaryPage
      case 3 => parquet.format.PageType.DataPageV2
      case _ => throw new NoSuchElementException(value.toString)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * returns an EnumUnknownPageType(value) if the value is not found.
   * In particular this allows ignoring new values added to an enum
   * in the IDL on the producer side when the consumer was not updated.
   */
  def getOrUnknown(value: Int): parquet.format.PageType =
    get(value) match {
      case _root_.scala.Some(e) => e
      case _root_.scala.None => EnumUnknownPageType(value)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): _root_.scala.Option[parquet.format.PageType] =
    value match {
      case 0 => _SomeDataPage
      case 1 => _SomeIndexPage
      case 2 => _SomeDictionaryPage
      case 3 => _SomeDataPageV2
      case _ => _root_.scala.None
    }

  def valueOf(name: String): _root_.scala.Option[parquet.format.PageType] =
    name.toLowerCase match {
      case "datapage" => _SomeDataPage
      case "indexpage" => _SomeIndexPage
      case "dictionarypage" => _SomeDictionaryPage
      case "datapagev2" => _SomeDataPageV2
      case _ => _root_.scala.None
    }

  lazy val list: List[parquet.format.PageType] = scala.List[parquet.format.PageType](
    parquet.format.PageType.DataPage,
    parquet.format.PageType.IndexPage,
    parquet.format.PageType.DictionaryPage,
    parquet.format.PageType.DataPageV2
  )
}



@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait PageType extends ThriftEnum with Serializable