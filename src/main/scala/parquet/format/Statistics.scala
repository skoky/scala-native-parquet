/**
 * Generated by Scrooge
 *   version: 4.16.0-SNAPSHOT
 *   rev: eb110c820bcd2734b26023f24d636bf6d37511b3
 *   built at: 20170607-185808
 */
package parquet.format

import com.twitter.io.Buf
import com.twitter.scrooge.{
  HasThriftStructCodec3,
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}

/**
 * Statistics per row group and per page
 * All fields are optional.
 */
object Statistics extends ThriftStructCodec3[Statistics] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("Statistics")
  val MaxField = new TField("max", TType.STRING, 1)
  val MaxFieldManifest = implicitly[Manifest[ByteBuffer]]
  val MinField = new TField("min", TType.STRING, 2)
  val MinFieldManifest = implicitly[Manifest[ByteBuffer]]
  val NullCountField = new TField("null_count", TType.I64, 3)
  val NullCountFieldManifest = implicitly[Manifest[Long]]
  val DistinctCountField = new TField("distinct_count", TType.I64, 4)
  val DistinctCountFieldManifest = implicitly[Manifest[Long]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      MaxField,
      true,
      false,
      MaxFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      MinField,
      true,
      false,
      MinFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      NullCountField,
      true,
      false,
      NullCountFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      DistinctCountField,
      true,
      false,
      DistinctCountFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Statistics): Unit = {
  }

  def withoutPassthroughFields(original: Statistics): Statistics =
    new Immutable(
      max =
        {
          val field = original.max
          field.map { field =>
            field
          }
        },
      min =
        {
          val field = original.min
          field.map { field =>
            field
          }
        },
      nullCount =
        {
          val field = original.nullCount
          field.map { field =>
            field
          }
        },
      distinctCount =
        {
          val field = original.distinctCount
          field.map { field =>
            field
          }
        }
    )

  override def encode(_item: Statistics, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): Statistics = {

    var max: Option[ByteBuffer] = None
    var min: Option[ByteBuffer] = None
    var null_countOffset: Int = -1
    var distinct_countOffset: Int = -1

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
    
                max = Some(readMaxValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'max' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
    
                min = Some(readMinValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'min' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I64 =>
                null_countOffset = _iprot.offsetSkipI64
    
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'nullCount' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I64 =>
                distinct_countOffset = _iprot.offsetSkipI64
    
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'distinctCount' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      max,
      min,
      null_countOffset,
      distinct_countOffset,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): Statistics =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[format] def eagerDecode(_iprot: TProtocol): Statistics = {
    var max: _root_.scala.Option[ByteBuffer] = _root_.scala.None
    var min: _root_.scala.Option[ByteBuffer] = _root_.scala.None
    var nullCount: _root_.scala.Option[Long] = _root_.scala.None
    var distinctCount: _root_.scala.Option[Long] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                max = _root_.scala.Some(readMaxValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'max' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                min = _root_.scala.Some(readMinValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'min' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I64 =>
                nullCount = _root_.scala.Some(readNullCountValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'nullCount' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I64 =>
                distinctCount = _root_.scala.Some(readDistinctCountValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'distinctCount' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      max,
      min,
      nullCount,
      distinctCount,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    max: _root_.scala.Option[ByteBuffer] = _root_.scala.None,
    min: _root_.scala.Option[ByteBuffer] = _root_.scala.None,
    nullCount: _root_.scala.Option[Long] = _root_.scala.None,
    distinctCount: _root_.scala.Option[Long] = _root_.scala.None
  ): Statistics =
    new Immutable(
      max,
      min,
      nullCount,
      distinctCount
    )

  def unapply(_item: Statistics): _root_.scala.Option[_root_.scala.Tuple4[Option[ByteBuffer], Option[ByteBuffer], Option[Long], Option[Long]]] = _root_.scala.Some(_item.toTuple)


  @inline private[format] def readMaxValue(_iprot: TProtocol): ByteBuffer = {
    _iprot.readBinary()
  }

  @inline private def writeMaxField(max_item: ByteBuffer, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MaxField)
    writeMaxValue(max_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMaxValue(max_item: ByteBuffer, _oprot: TProtocol): Unit = {
    _oprot.writeBinary(max_item)
  }

  @inline private[format] def readMinValue(_iprot: TProtocol): ByteBuffer = {
    _iprot.readBinary()
  }

  @inline private def writeMinField(min_item: ByteBuffer, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MinField)
    writeMinValue(min_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMinValue(min_item: ByteBuffer, _oprot: TProtocol): Unit = {
    _oprot.writeBinary(min_item)
  }

  @inline private[format] def readNullCountValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeNullCountField(nullCount_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(NullCountField)
    writeNullCountValue(nullCount_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeNullCountValue(nullCount_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(nullCount_item)
  }

  @inline private[format] def readDistinctCountValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeDistinctCountField(distinctCount_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(DistinctCountField)
    writeDistinctCountValue(distinctCount_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeDistinctCountValue(distinctCount_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(distinctCount_item)
  }


  object Immutable extends ThriftStructCodec3[Statistics] {
    override def encode(_item: Statistics, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): Statistics = Statistics.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[Statistics] = Statistics.metaData
  }

  /**
   * The default read-only implementation of Statistics.  You typically should not need to
   * directly reference this class; instead, use the Statistics.apply method to construct
   * new instances.
   */
  class Immutable(
      val max: _root_.scala.Option[ByteBuffer],
      val min: _root_.scala.Option[ByteBuffer],
      val nullCount: _root_.scala.Option[Long],
      val distinctCount: _root_.scala.Option[Long],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends Statistics {
    def this(
      max: _root_.scala.Option[ByteBuffer] = _root_.scala.None,
      min: _root_.scala.Option[ByteBuffer] = _root_.scala.None,
      nullCount: _root_.scala.Option[Long] = _root_.scala.None,
      distinctCount: _root_.scala.Option[Long] = _root_.scala.None
    ) = this(
      max,
      min,
      nullCount,
      distinctCount,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val max: _root_.scala.Option[ByteBuffer],
      val min: _root_.scala.Option[ByteBuffer],
      null_countOffset: Int,
      distinct_countOffset: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends Statistics {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val nullCount: _root_.scala.Option[Long] =
      if (null_countOffset == -1)
        None
      else {
        Some(_proto.decodeI64(_buf, null_countOffset))
      }
    lazy val distinctCount: _root_.scala.Option[Long] =
      if (distinct_countOffset == -1)
        None
      else {
        Some(_proto.decodeI64(_buf, distinct_countOffset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the Statistics trait with additional state or
   * behavior and implement the read-only methods from Statistics using an underlying
   * instance.
   */
  trait Proxy extends Statistics {
    protected def _underlying_Statistics: Statistics
    override def max: _root_.scala.Option[ByteBuffer] = _underlying_Statistics.max
    override def min: _root_.scala.Option[ByteBuffer] = _underlying_Statistics.min
    override def nullCount: _root_.scala.Option[Long] = _underlying_Statistics.nullCount
    override def distinctCount: _root_.scala.Option[Long] = _underlying_Statistics.distinctCount
    override def _passthroughFields = _underlying_Statistics._passthroughFields
  }
}

/**
 * Prefer the companion object's [[parquet.format.Statistics.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait Statistics
  extends ThriftStruct
  with _root_.scala.Product4[Option[ByteBuffer], Option[ByteBuffer], Option[Long], Option[Long]]
  with HasThriftStructCodec3[Statistics]
  with java.io.Serializable
{
  import Statistics._

  def max: _root_.scala.Option[ByteBuffer]
  def min: _root_.scala.Option[ByteBuffer]
  def nullCount: _root_.scala.Option[Long]
  def distinctCount: _root_.scala.Option[Long]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = max
  def _2 = min
  def _3 = nullCount
  def _4 = distinctCount

  def toTuple: _root_.scala.Tuple4[Option[ByteBuffer], Option[ByteBuffer], Option[Long], Option[Long]] = {
    (
      max,
      min,
      nullCount,
      distinctCount
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (max.isDefined) {
                writeMaxValue(max.get, _oprot)
                _root_.scala.Some(Statistics.MaxField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (min.isDefined) {
                writeMinValue(min.get, _oprot)
                _root_.scala.Some(Statistics.MinField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (nullCount.isDefined) {
                writeNullCountValue(nullCount.get, _oprot)
                _root_.scala.Some(Statistics.NullCountField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (distinctCount.isDefined) {
                writeDistinctCountValue(distinctCount.get, _oprot)
                _root_.scala.Some(Statistics.DistinctCountField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): Statistics = {
    var max: _root_.scala.Option[ByteBuffer] = this.max
    var min: _root_.scala.Option[ByteBuffer] = this.min
    var nullCount: _root_.scala.Option[Long] = this.nullCount
    var distinctCount: _root_.scala.Option[Long] = this.distinctCount
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        max = _root_.scala.Some(readMaxValue(_blob.read))
      case 2 =>
        min = _root_.scala.Some(readMinValue(_blob.read))
      case 3 =>
        nullCount = _root_.scala.Some(readNullCountValue(_blob.read))
      case 4 =>
        distinctCount = _root_.scala.Some(readDistinctCountValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      max,
      min,
      nullCount,
      distinctCount,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): Statistics = {
    var max: _root_.scala.Option[ByteBuffer] = this.max
    var min: _root_.scala.Option[ByteBuffer] = this.min
    var nullCount: _root_.scala.Option[Long] = this.nullCount
    var distinctCount: _root_.scala.Option[Long] = this.distinctCount

    _fieldId match {
      case 1 =>
        max = _root_.scala.None
      case 2 =>
        min = _root_.scala.None
      case 3 =>
        nullCount = _root_.scala.None
      case 4 =>
        distinctCount = _root_.scala.None
      case _ =>
    }
    new Immutable(
      max,
      min,
      nullCount,
      distinctCount,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetMax: Statistics = unsetField(1)

  def unsetMin: Statistics = unsetField(2)

  def unsetNullCount: Statistics = unsetField(3)

  def unsetDistinctCount: Statistics = unsetField(4)


  override def write(_oprot: TProtocol): Unit = {
    Statistics.validate(this)
    _oprot.writeStructBegin(Struct)
    if (max.isDefined) writeMaxField(max.get, _oprot)
    if (min.isDefined) writeMinField(min.get, _oprot)
    if (nullCount.isDefined) writeNullCountField(nullCount.get, _oprot)
    if (distinctCount.isDefined) writeDistinctCountField(distinctCount.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    max: _root_.scala.Option[ByteBuffer] = this.max,
    min: _root_.scala.Option[ByteBuffer] = this.min,
    nullCount: _root_.scala.Option[Long] = this.nullCount,
    distinctCount: _root_.scala.Option[Long] = this.distinctCount,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): Statistics =
    new Immutable(
      max,
      min,
      nullCount,
      distinctCount,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Statistics]

  private def _equals(x: Statistics, y: Statistics): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator)

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[Statistics]) &&
      _passthroughFields == other.asInstanceOf[Statistics]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => this.max
    case 1 => this.min
    case 2 => this.nullCount
    case 3 => this.distinctCount
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Statistics"

  def _codec: ThriftStructCodec3[Statistics] = Statistics
}

