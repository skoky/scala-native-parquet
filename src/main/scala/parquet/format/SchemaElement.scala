/**
 * Generated by Scrooge
 *   version: 4.16.0-SNAPSHOT
 *   rev: eb110c820bcd2734b26023f24d636bf6d37511b3
 *   built at: 20170607-185808
 */
package parquet.format

import com.twitter.io.Buf
import com.twitter.scrooge.{
  HasThriftStructCodec3,
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}

/**
 * Represents a element inside a schema definition.
 *  - if it is a group (inner node) then type is undefined and num_children is defined
 *  - if it is a primitive type (leaf) then type is defined and num_children is undefined
 * the nodes are listed in depth first traversal order.
 */
object SchemaElement extends ThriftStructCodec3[SchemaElement] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("SchemaElement")
  val TypeField = new TField("type", TType.ENUM, 1)
  val TypeFieldI32 = new TField("type", TType.I32, 1)
  val TypeFieldManifest = implicitly[Manifest[parquet.format.Type]]
  val TypeLengthField = new TField("type_length", TType.I32, 2)
  val TypeLengthFieldManifest = implicitly[Manifest[Int]]
  val RepetitionTypeField = new TField("repetition_type", TType.ENUM, 3)
  val RepetitionTypeFieldI32 = new TField("repetition_type", TType.I32, 3)
  val RepetitionTypeFieldManifest = implicitly[Manifest[parquet.format.FieldRepetitionType]]
  val NameField = new TField("name", TType.STRING, 4)
  val NameFieldManifest = implicitly[Manifest[String]]
  val NumChildrenField = new TField("num_children", TType.I32, 5)
  val NumChildrenFieldManifest = implicitly[Manifest[Int]]
  val ConvertedTypeField = new TField("converted_type", TType.ENUM, 6)
  val ConvertedTypeFieldI32 = new TField("converted_type", TType.I32, 6)
  val ConvertedTypeFieldManifest = implicitly[Manifest[parquet.format.ConvertedType]]
  val ScaleField = new TField("scale", TType.I32, 7)
  val ScaleFieldManifest = implicitly[Manifest[Int]]
  val PrecisionField = new TField("precision", TType.I32, 8)
  val PrecisionFieldManifest = implicitly[Manifest[Int]]
  val FieldIdField = new TField("field_id", TType.I32, 9)
  val FieldIdFieldManifest = implicitly[Manifest[Int]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      TypeField,
      true,
      false,
      TypeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      TypeLengthField,
      true,
      false,
      TypeLengthFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      RepetitionTypeField,
      true,
      false,
      RepetitionTypeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      NameField,
      false,
      true,
      NameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      NumChildrenField,
      true,
      false,
      NumChildrenFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ConvertedTypeField,
      true,
      false,
      ConvertedTypeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ScaleField,
      true,
      false,
      ScaleFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      PrecisionField,
      true,
      false,
      PrecisionFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      FieldIdField,
      true,
      false,
      FieldIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: SchemaElement): Unit = {
    if (_item.name == null) throw new TProtocolException("Required field name cannot be null")
  }

  def withoutPassthroughFields(original: SchemaElement): SchemaElement =
    new Immutable(
      `type` =
        {
          val field = original.`type`
          field.map { field =>
            field
          }
        },
      typeLength =
        {
          val field = original.typeLength
          field.map { field =>
            field
          }
        },
      repetitionType =
        {
          val field = original.repetitionType
          field.map { field =>
            field
          }
        },
      name =
        {
          val field = original.name
          field
        },
      numChildren =
        {
          val field = original.numChildren
          field.map { field =>
            field
          }
        },
      convertedType =
        {
          val field = original.convertedType
          field.map { field =>
            field
          }
        },
      scale =
        {
          val field = original.scale
          field.map { field =>
            field
          }
        },
      precision =
        {
          val field = original.precision
          field.map { field =>
            field
          }
        },
      fieldId =
        {
          val field = original.fieldId
          field.map { field =>
            field
          }
        }
    )

  override def encode(_item: SchemaElement, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): SchemaElement = {

    var `type`: Option[parquet.format.Type] = None
    var type_lengthOffset: Int = -1
    var repetitionType: Option[parquet.format.FieldRepetitionType] = None
    var nameOffset: Int = -1
    var _got_name = false
    var num_childrenOffset: Int = -1
    var convertedType: Option[parquet.format.ConvertedType] = None
    var scaleOffset: Int = -1
    var precisionOffset: Int = -1
    var field_idOffset: Int = -1

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
    
                `type` = Some(readTypeValue(_iprot))
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field '`type`' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 =>
                type_lengthOffset = _iprot.offsetSkipI32
    
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'typeLength' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
    
                repetitionType = Some(readRepetitionTypeValue(_iprot))
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'repetitionType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                nameOffset = _iprot.offsetSkipString
    
                _got_name = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'name' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I32 =>
                num_childrenOffset = _iprot.offsetSkipI32
    
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'numChildren' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
    
                convertedType = Some(readConvertedTypeValue(_iprot))
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'convertedType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.I32 =>
                scaleOffset = _iprot.offsetSkipI32
    
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'scale' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.I32 =>
                precisionOffset = _iprot.offsetSkipI32
    
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'precision' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.I32 =>
                field_idOffset = _iprot.offsetSkipI32
    
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'fieldId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_name) throw new TProtocolException("Required field 'name' was not found in serialized data for struct SchemaElement")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      `type`,
      type_lengthOffset,
      repetitionType,
      nameOffset,
      num_childrenOffset,
      convertedType,
      scaleOffset,
      precisionOffset,
      field_idOffset,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): SchemaElement =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[format] def eagerDecode(_iprot: TProtocol): SchemaElement = {
    var `type`: _root_.scala.Option[parquet.format.Type] = _root_.scala.None
    var typeLength: _root_.scala.Option[Int] = _root_.scala.None
    var repetitionType: _root_.scala.Option[parquet.format.FieldRepetitionType] = _root_.scala.None
    var name: String = null
    var _got_name = false
    var numChildren: _root_.scala.Option[Int] = _root_.scala.None
    var convertedType: _root_.scala.Option[parquet.format.ConvertedType] = _root_.scala.None
    var scale: _root_.scala.Option[Int] = _root_.scala.None
    var precision: _root_.scala.Option[Int] = _root_.scala.None
    var fieldId: _root_.scala.Option[Int] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
                `type` = _root_.scala.Some(readTypeValue(_iprot))
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field '`type`' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 =>
                typeLength = _root_.scala.Some(readTypeLengthValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'typeLength' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
                repetitionType = _root_.scala.Some(readRepetitionTypeValue(_iprot))
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'repetitionType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                name = readNameValue(_iprot)
                _got_name = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'name' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I32 =>
                numChildren = _root_.scala.Some(readNumChildrenValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'numChildren' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
                convertedType = _root_.scala.Some(readConvertedTypeValue(_iprot))
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'convertedType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.I32 =>
                scale = _root_.scala.Some(readScaleValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'scale' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.I32 =>
                precision = _root_.scala.Some(readPrecisionValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'precision' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.I32 =>
                fieldId = _root_.scala.Some(readFieldIdValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'fieldId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_name) throw new TProtocolException("Required field 'name' was not found in serialized data for struct SchemaElement")
    new Immutable(
      `type`,
      typeLength,
      repetitionType,
      name,
      numChildren,
      convertedType,
      scale,
      precision,
      fieldId,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    `type`: _root_.scala.Option[parquet.format.Type] = _root_.scala.None,
    typeLength: _root_.scala.Option[Int] = _root_.scala.None,
    repetitionType: _root_.scala.Option[parquet.format.FieldRepetitionType] = _root_.scala.None,
    name: String,
    numChildren: _root_.scala.Option[Int] = _root_.scala.None,
    convertedType: _root_.scala.Option[parquet.format.ConvertedType] = _root_.scala.None,
    scale: _root_.scala.Option[Int] = _root_.scala.None,
    precision: _root_.scala.Option[Int] = _root_.scala.None,
    fieldId: _root_.scala.Option[Int] = _root_.scala.None
  ): SchemaElement =
    new Immutable(
      `type`,
      typeLength,
      repetitionType,
      name,
      numChildren,
      convertedType,
      scale,
      precision,
      fieldId
    )

  def unapply(_item: SchemaElement): _root_.scala.Option[_root_.scala.Tuple9[Option[parquet.format.Type], Option[Int], Option[parquet.format.FieldRepetitionType], String, Option[Int], Option[parquet.format.ConvertedType], Option[Int], Option[Int], Option[Int]]] = _root_.scala.Some(_item.toTuple)


  @inline private[format] def readTypeValue(_iprot: TProtocol): parquet.format.Type = {
    parquet.format.Type.getOrUnknown(_iprot.readI32())
  }

  @inline private def writeTypeField(type_item: parquet.format.Type, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(TypeFieldI32)
    writeTypeValue(type_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTypeValue(type_item: parquet.format.Type, _oprot: TProtocol): Unit = {
    _oprot.writeI32(type_item.value)
  }

  @inline private[format] def readTypeLengthValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeTypeLengthField(typeLength_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(TypeLengthField)
    writeTypeLengthValue(typeLength_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTypeLengthValue(typeLength_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(typeLength_item)
  }

  @inline private[format] def readRepetitionTypeValue(_iprot: TProtocol): parquet.format.FieldRepetitionType = {
    parquet.format.FieldRepetitionType.getOrUnknown(_iprot.readI32())
  }

  @inline private def writeRepetitionTypeField(repetitionType_item: parquet.format.FieldRepetitionType, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(RepetitionTypeFieldI32)
    writeRepetitionTypeValue(repetitionType_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeRepetitionTypeValue(repetitionType_item: parquet.format.FieldRepetitionType, _oprot: TProtocol): Unit = {
    _oprot.writeI32(repetitionType_item.value)
  }

  @inline private[format] def readNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeNameField(name_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(NameField)
    writeNameValue(name_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeNameValue(name_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(name_item)
  }

  @inline private[format] def readNumChildrenValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeNumChildrenField(numChildren_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(NumChildrenField)
    writeNumChildrenValue(numChildren_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeNumChildrenValue(numChildren_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(numChildren_item)
  }

  @inline private[format] def readConvertedTypeValue(_iprot: TProtocol): parquet.format.ConvertedType = {
    parquet.format.ConvertedType.getOrUnknown(_iprot.readI32())
  }

  @inline private def writeConvertedTypeField(convertedType_item: parquet.format.ConvertedType, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ConvertedTypeFieldI32)
    writeConvertedTypeValue(convertedType_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeConvertedTypeValue(convertedType_item: parquet.format.ConvertedType, _oprot: TProtocol): Unit = {
    _oprot.writeI32(convertedType_item.value)
  }

  @inline private[format] def readScaleValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeScaleField(scale_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ScaleField)
    writeScaleValue(scale_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeScaleValue(scale_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(scale_item)
  }

  @inline private[format] def readPrecisionValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writePrecisionField(precision_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(PrecisionField)
    writePrecisionValue(precision_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writePrecisionValue(precision_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(precision_item)
  }

  @inline private[format] def readFieldIdValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeFieldIdField(fieldId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(FieldIdField)
    writeFieldIdValue(fieldId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeFieldIdValue(fieldId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(fieldId_item)
  }


  object Immutable extends ThriftStructCodec3[SchemaElement] {
    override def encode(_item: SchemaElement, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): SchemaElement = SchemaElement.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[SchemaElement] = SchemaElement.metaData
  }

  /**
   * The default read-only implementation of SchemaElement.  You typically should not need to
   * directly reference this class; instead, use the SchemaElement.apply method to construct
   * new instances.
   */
  class Immutable(
      val `type`: _root_.scala.Option[parquet.format.Type],
      val typeLength: _root_.scala.Option[Int],
      val repetitionType: _root_.scala.Option[parquet.format.FieldRepetitionType],
      val name: String,
      val numChildren: _root_.scala.Option[Int],
      val convertedType: _root_.scala.Option[parquet.format.ConvertedType],
      val scale: _root_.scala.Option[Int],
      val precision: _root_.scala.Option[Int],
      val fieldId: _root_.scala.Option[Int],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends SchemaElement {
    def this(
      `type`: _root_.scala.Option[parquet.format.Type] = _root_.scala.None,
      typeLength: _root_.scala.Option[Int] = _root_.scala.None,
      repetitionType: _root_.scala.Option[parquet.format.FieldRepetitionType] = _root_.scala.None,
      name: String,
      numChildren: _root_.scala.Option[Int] = _root_.scala.None,
      convertedType: _root_.scala.Option[parquet.format.ConvertedType] = _root_.scala.None,
      scale: _root_.scala.Option[Int] = _root_.scala.None,
      precision: _root_.scala.Option[Int] = _root_.scala.None,
      fieldId: _root_.scala.Option[Int] = _root_.scala.None
    ) = this(
      `type`,
      typeLength,
      repetitionType,
      name,
      numChildren,
      convertedType,
      scale,
      precision,
      fieldId,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val `type`: _root_.scala.Option[parquet.format.Type],
      type_lengthOffset: Int,
      val repetitionType: _root_.scala.Option[parquet.format.FieldRepetitionType],
      nameOffset: Int,
      num_childrenOffset: Int,
      val convertedType: _root_.scala.Option[parquet.format.ConvertedType],
      scaleOffset: Int,
      precisionOffset: Int,
      field_idOffset: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends SchemaElement {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val typeLength: _root_.scala.Option[Int] =
      if (type_lengthOffset == -1)
        None
      else {
        Some(_proto.decodeI32(_buf, type_lengthOffset))
      }
    lazy val name: String =
      if (nameOffset == -1)
        null
      else {
        _proto.decodeString(_buf, nameOffset)
      }
    lazy val numChildren: _root_.scala.Option[Int] =
      if (num_childrenOffset == -1)
        None
      else {
        Some(_proto.decodeI32(_buf, num_childrenOffset))
      }
    lazy val scale: _root_.scala.Option[Int] =
      if (scaleOffset == -1)
        None
      else {
        Some(_proto.decodeI32(_buf, scaleOffset))
      }
    lazy val precision: _root_.scala.Option[Int] =
      if (precisionOffset == -1)
        None
      else {
        Some(_proto.decodeI32(_buf, precisionOffset))
      }
    lazy val fieldId: _root_.scala.Option[Int] =
      if (field_idOffset == -1)
        None
      else {
        Some(_proto.decodeI32(_buf, field_idOffset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the SchemaElement trait with additional state or
   * behavior and implement the read-only methods from SchemaElement using an underlying
   * instance.
   */
  trait Proxy extends SchemaElement {
    protected def _underlying_SchemaElement: SchemaElement
    override def `type`: _root_.scala.Option[parquet.format.Type] = _underlying_SchemaElement.`type`
    override def typeLength: _root_.scala.Option[Int] = _underlying_SchemaElement.typeLength
    override def repetitionType: _root_.scala.Option[parquet.format.FieldRepetitionType] = _underlying_SchemaElement.repetitionType
    override def name: String = _underlying_SchemaElement.name
    override def numChildren: _root_.scala.Option[Int] = _underlying_SchemaElement.numChildren
    override def convertedType: _root_.scala.Option[parquet.format.ConvertedType] = _underlying_SchemaElement.convertedType
    override def scale: _root_.scala.Option[Int] = _underlying_SchemaElement.scale
    override def precision: _root_.scala.Option[Int] = _underlying_SchemaElement.precision
    override def fieldId: _root_.scala.Option[Int] = _underlying_SchemaElement.fieldId
    override def _passthroughFields = _underlying_SchemaElement._passthroughFields
  }
}

/**
 * Prefer the companion object's [[parquet.format.SchemaElement.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait SchemaElement
  extends ThriftStruct
  with _root_.scala.Product9[Option[parquet.format.Type], Option[Int], Option[parquet.format.FieldRepetitionType], String, Option[Int], Option[parquet.format.ConvertedType], Option[Int], Option[Int], Option[Int]]
  with HasThriftStructCodec3[SchemaElement]
  with java.io.Serializable
{
  import SchemaElement._

  def `type`: _root_.scala.Option[parquet.format.Type]
  def typeLength: _root_.scala.Option[Int]
  def repetitionType: _root_.scala.Option[parquet.format.FieldRepetitionType]
  def name: String
  def numChildren: _root_.scala.Option[Int]
  def convertedType: _root_.scala.Option[parquet.format.ConvertedType]
  def scale: _root_.scala.Option[Int]
  def precision: _root_.scala.Option[Int]
  def fieldId: _root_.scala.Option[Int]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = `type`
  def _2 = typeLength
  def _3 = repetitionType
  def _4 = name
  def _5 = numChildren
  def _6 = convertedType
  def _7 = scale
  def _8 = precision
  def _9 = fieldId

  def toTuple: _root_.scala.Tuple9[Option[parquet.format.Type], Option[Int], Option[parquet.format.FieldRepetitionType], String, Option[Int], Option[parquet.format.ConvertedType], Option[Int], Option[Int], Option[Int]] = {
    (
      `type`,
      typeLength,
      repetitionType,
      name,
      numChildren,
      convertedType,
      scale,
      precision,
      fieldId
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (`type`.isDefined) {
                writeTypeValue(`type`.get, _oprot)
                _root_.scala.Some(SchemaElement.TypeField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (typeLength.isDefined) {
                writeTypeLengthValue(typeLength.get, _oprot)
                _root_.scala.Some(SchemaElement.TypeLengthField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (repetitionType.isDefined) {
                writeRepetitionTypeValue(repetitionType.get, _oprot)
                _root_.scala.Some(SchemaElement.RepetitionTypeField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (name ne null) {
                writeNameValue(name, _oprot)
                _root_.scala.Some(SchemaElement.NameField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (numChildren.isDefined) {
                writeNumChildrenValue(numChildren.get, _oprot)
                _root_.scala.Some(SchemaElement.NumChildrenField)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (convertedType.isDefined) {
                writeConvertedTypeValue(convertedType.get, _oprot)
                _root_.scala.Some(SchemaElement.ConvertedTypeField)
              } else {
                _root_.scala.None
              }
            case 7 =>
              if (scale.isDefined) {
                writeScaleValue(scale.get, _oprot)
                _root_.scala.Some(SchemaElement.ScaleField)
              } else {
                _root_.scala.None
              }
            case 8 =>
              if (precision.isDefined) {
                writePrecisionValue(precision.get, _oprot)
                _root_.scala.Some(SchemaElement.PrecisionField)
              } else {
                _root_.scala.None
              }
            case 9 =>
              if (fieldId.isDefined) {
                writeFieldIdValue(fieldId.get, _oprot)
                _root_.scala.Some(SchemaElement.FieldIdField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): SchemaElement = {
    var `type`: _root_.scala.Option[parquet.format.Type] = this.`type`
    var typeLength: _root_.scala.Option[Int] = this.typeLength
    var repetitionType: _root_.scala.Option[parquet.format.FieldRepetitionType] = this.repetitionType
    var name: String = this.name
    var numChildren: _root_.scala.Option[Int] = this.numChildren
    var convertedType: _root_.scala.Option[parquet.format.ConvertedType] = this.convertedType
    var scale: _root_.scala.Option[Int] = this.scale
    var precision: _root_.scala.Option[Int] = this.precision
    var fieldId: _root_.scala.Option[Int] = this.fieldId
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        `type` = _root_.scala.Some(readTypeValue(_blob.read))
      case 2 =>
        typeLength = _root_.scala.Some(readTypeLengthValue(_blob.read))
      case 3 =>
        repetitionType = _root_.scala.Some(readRepetitionTypeValue(_blob.read))
      case 4 =>
        name = readNameValue(_blob.read)
      case 5 =>
        numChildren = _root_.scala.Some(readNumChildrenValue(_blob.read))
      case 6 =>
        convertedType = _root_.scala.Some(readConvertedTypeValue(_blob.read))
      case 7 =>
        scale = _root_.scala.Some(readScaleValue(_blob.read))
      case 8 =>
        precision = _root_.scala.Some(readPrecisionValue(_blob.read))
      case 9 =>
        fieldId = _root_.scala.Some(readFieldIdValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      `type`,
      typeLength,
      repetitionType,
      name,
      numChildren,
      convertedType,
      scale,
      precision,
      fieldId,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): SchemaElement = {
    var `type`: _root_.scala.Option[parquet.format.Type] = this.`type`
    var typeLength: _root_.scala.Option[Int] = this.typeLength
    var repetitionType: _root_.scala.Option[parquet.format.FieldRepetitionType] = this.repetitionType
    var name: String = this.name
    var numChildren: _root_.scala.Option[Int] = this.numChildren
    var convertedType: _root_.scala.Option[parquet.format.ConvertedType] = this.convertedType
    var scale: _root_.scala.Option[Int] = this.scale
    var precision: _root_.scala.Option[Int] = this.precision
    var fieldId: _root_.scala.Option[Int] = this.fieldId

    _fieldId match {
      case 1 =>
        `type` = _root_.scala.None
      case 2 =>
        typeLength = _root_.scala.None
      case 3 =>
        repetitionType = _root_.scala.None
      case 4 =>
        name = null
      case 5 =>
        numChildren = _root_.scala.None
      case 6 =>
        convertedType = _root_.scala.None
      case 7 =>
        scale = _root_.scala.None
      case 8 =>
        precision = _root_.scala.None
      case 9 =>
        fieldId = _root_.scala.None
      case _ =>
    }
    new Immutable(
      `type`,
      typeLength,
      repetitionType,
      name,
      numChildren,
      convertedType,
      scale,
      precision,
      fieldId,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetType: SchemaElement = unsetField(1)

  def unsetTypeLength: SchemaElement = unsetField(2)

  def unsetRepetitionType: SchemaElement = unsetField(3)

  def unsetName: SchemaElement = unsetField(4)

  def unsetNumChildren: SchemaElement = unsetField(5)

  def unsetConvertedType: SchemaElement = unsetField(6)

  def unsetScale: SchemaElement = unsetField(7)

  def unsetPrecision: SchemaElement = unsetField(8)

  def unsetFieldId: SchemaElement = unsetField(9)


  override def write(_oprot: TProtocol): Unit = {
    SchemaElement.validate(this)
    _oprot.writeStructBegin(Struct)
    if (`type`.isDefined) writeTypeField(`type`.get, _oprot)
    if (typeLength.isDefined) writeTypeLengthField(typeLength.get, _oprot)
    if (repetitionType.isDefined) writeRepetitionTypeField(repetitionType.get, _oprot)
    if (name ne null) writeNameField(name, _oprot)
    if (numChildren.isDefined) writeNumChildrenField(numChildren.get, _oprot)
    if (convertedType.isDefined) writeConvertedTypeField(convertedType.get, _oprot)
    if (scale.isDefined) writeScaleField(scale.get, _oprot)
    if (precision.isDefined) writePrecisionField(precision.get, _oprot)
    if (fieldId.isDefined) writeFieldIdField(fieldId.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    `type`: _root_.scala.Option[parquet.format.Type] = this.`type`,
    typeLength: _root_.scala.Option[Int] = this.typeLength,
    repetitionType: _root_.scala.Option[parquet.format.FieldRepetitionType] = this.repetitionType,
    name: String = this.name,
    numChildren: _root_.scala.Option[Int] = this.numChildren,
    convertedType: _root_.scala.Option[parquet.format.ConvertedType] = this.convertedType,
    scale: _root_.scala.Option[Int] = this.scale,
    precision: _root_.scala.Option[Int] = this.precision,
    fieldId: _root_.scala.Option[Int] = this.fieldId,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): SchemaElement =
    new Immutable(
      `type`,
      typeLength,
      repetitionType,
      name,
      numChildren,
      convertedType,
      scale,
      precision,
      fieldId,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[SchemaElement]

  private def _equals(x: SchemaElement, y: SchemaElement): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator)

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[SchemaElement]) &&
      _passthroughFields == other.asInstanceOf[SchemaElement]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 9

  override def productElement(n: Int): Any = n match {
    case 0 => this.`type`
    case 1 => this.typeLength
    case 2 => this.repetitionType
    case 3 => this.name
    case 4 => this.numChildren
    case 5 => this.convertedType
    case 6 => this.scale
    case 7 => this.precision
    case 8 => this.fieldId
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "SchemaElement"

  def _codec: ThriftStructCodec3[SchemaElement] = SchemaElement
}

