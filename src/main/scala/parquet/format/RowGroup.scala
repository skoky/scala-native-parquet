/**
 * Generated by Scrooge
 *   version: 4.16.0-SNAPSHOT
 *   rev: eb110c820bcd2734b26023f24d636bf6d37511b3
 *   built at: 20170607-185808
 */
package parquet.format

import com.twitter.io.Buf
import com.twitter.scrooge.{
  HasThriftStructCodec3,
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object RowGroup extends ThriftStructCodec3[RowGroup] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("RowGroup")
  val ColumnsField = new TField("columns", TType.LIST, 1)
  val ColumnsFieldManifest = implicitly[Manifest[Seq[parquet.format.ColumnChunk]]]
  val TotalByteSizeField = new TField("total_byte_size", TType.I64, 2)
  val TotalByteSizeFieldManifest = implicitly[Manifest[Long]]
  val NumRowsField = new TField("num_rows", TType.I64, 3)
  val NumRowsFieldManifest = implicitly[Manifest[Long]]
  val SortingColumnsField = new TField("sorting_columns", TType.LIST, 4)
  val SortingColumnsFieldManifest = implicitly[Manifest[Seq[parquet.format.SortingColumn]]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      ColumnsField,
      false,
      true,
      ColumnsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[parquet.format.ColumnChunk]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      TotalByteSizeField,
      false,
      true,
      TotalByteSizeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      NumRowsField,
      false,
      true,
      NumRowsFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      SortingColumnsField,
      true,
      false,
      SortingColumnsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[parquet.format.SortingColumn]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: RowGroup): Unit = {
    if (_item.columns == null) throw new TProtocolException("Required field columns cannot be null")
  }

  def withoutPassthroughFields(original: RowGroup): RowGroup =
    new Immutable(
      columns =
        {
          val field = original.columns
          field.map { field =>
            parquet.format.ColumnChunk.withoutPassthroughFields(field)
          }
        },
      totalByteSize =
        {
          val field = original.totalByteSize
          field
        },
      numRows =
        {
          val field = original.numRows
          field
        },
      sortingColumns =
        {
          val field = original.sortingColumns
          field.map { field =>
            field.map { field =>
              parquet.format.SortingColumn.withoutPassthroughFields(field)
            }
          }
        }
    )

  override def encode(_item: RowGroup, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): RowGroup = {

    var columns: Seq[parquet.format.ColumnChunk] = Seq[parquet.format.ColumnChunk]()
    var _got_columns = false
    var totalByteSize: Long = 0L
    var _got_totalByteSize = false
    var numRows: Long = 0L
    var _got_numRows = false
    var sortingColumns: Option[Seq[parquet.format.SortingColumn]] = None

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.LIST =>
    
                columns = readColumnsValue(_iprot)
                _got_columns = true
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'columns' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I64 =>
    
                totalByteSize = readTotalByteSizeValue(_iprot)
                _got_totalByteSize = true
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'totalByteSize' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I64 =>
    
                numRows = readNumRowsValue(_iprot)
                _got_numRows = true
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'numRows' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.LIST =>
    
                sortingColumns = Some(readSortingColumnsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'sortingColumns' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_columns) throw new TProtocolException("Required field 'columns' was not found in serialized data for struct RowGroup")
    if (!_got_totalByteSize) throw new TProtocolException("Required field 'totalByteSize' was not found in serialized data for struct RowGroup")
    if (!_got_numRows) throw new TProtocolException("Required field 'numRows' was not found in serialized data for struct RowGroup")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      columns,
      totalByteSize,
      numRows,
      sortingColumns,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): RowGroup =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[format] def eagerDecode(_iprot: TProtocol): RowGroup = {
    var columns: Seq[parquet.format.ColumnChunk] = Seq[parquet.format.ColumnChunk]()
    var _got_columns = false
    var totalByteSize: Long = 0L
    var _got_totalByteSize = false
    var numRows: Long = 0L
    var _got_numRows = false
    var sortingColumns: _root_.scala.Option[Seq[parquet.format.SortingColumn]] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.LIST =>
                columns = readColumnsValue(_iprot)
                _got_columns = true
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'columns' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I64 =>
                totalByteSize = readTotalByteSizeValue(_iprot)
                _got_totalByteSize = true
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'totalByteSize' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I64 =>
                numRows = readNumRowsValue(_iprot)
                _got_numRows = true
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'numRows' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.LIST =>
                sortingColumns = _root_.scala.Some(readSortingColumnsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'sortingColumns' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_columns) throw new TProtocolException("Required field 'columns' was not found in serialized data for struct RowGroup")
    if (!_got_totalByteSize) throw new TProtocolException("Required field 'totalByteSize' was not found in serialized data for struct RowGroup")
    if (!_got_numRows) throw new TProtocolException("Required field 'numRows' was not found in serialized data for struct RowGroup")
    new Immutable(
      columns,
      totalByteSize,
      numRows,
      sortingColumns,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    columns: Seq[parquet.format.ColumnChunk] = Seq[parquet.format.ColumnChunk](),
    totalByteSize: Long,
    numRows: Long,
    sortingColumns: _root_.scala.Option[Seq[parquet.format.SortingColumn]] = _root_.scala.None
  ): RowGroup =
    new Immutable(
      columns,
      totalByteSize,
      numRows,
      sortingColumns
    )

  def unapply(_item: RowGroup): _root_.scala.Option[_root_.scala.Tuple4[Seq[parquet.format.ColumnChunk], Long, Long, Option[Seq[parquet.format.SortingColumn]]]] = _root_.scala.Some(_item.toTuple)


  @inline private[format] def readColumnsValue(_iprot: TProtocol): Seq[parquet.format.ColumnChunk] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[parquet.format.ColumnChunk](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          parquet.format.ColumnChunk.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeColumnsField(columns_item: Seq[parquet.format.ColumnChunk], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ColumnsField)
    writeColumnsValue(columns_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeColumnsValue(columns_item: Seq[parquet.format.ColumnChunk], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, columns_item.size))
    columns_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = columns_item.size
        while (_i < _size) {
          val columns_item_element = columns_item(_i)
          columns_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        columns_item.foreach { columns_item_element =>
          columns_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[format] def readTotalByteSizeValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeTotalByteSizeField(totalByteSize_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(TotalByteSizeField)
    writeTotalByteSizeValue(totalByteSize_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTotalByteSizeValue(totalByteSize_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(totalByteSize_item)
  }

  @inline private[format] def readNumRowsValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeNumRowsField(numRows_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(NumRowsField)
    writeNumRowsValue(numRows_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeNumRowsValue(numRows_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(numRows_item)
  }

  @inline private[format] def readSortingColumnsValue(_iprot: TProtocol): Seq[parquet.format.SortingColumn] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[parquet.format.SortingColumn](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          parquet.format.SortingColumn.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeSortingColumnsField(sortingColumns_item: Seq[parquet.format.SortingColumn], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(SortingColumnsField)
    writeSortingColumnsValue(sortingColumns_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeSortingColumnsValue(sortingColumns_item: Seq[parquet.format.SortingColumn], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, sortingColumns_item.size))
    sortingColumns_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = sortingColumns_item.size
        while (_i < _size) {
          val sortingColumns_item_element = sortingColumns_item(_i)
          sortingColumns_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        sortingColumns_item.foreach { sortingColumns_item_element =>
          sortingColumns_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }


  object Immutable extends ThriftStructCodec3[RowGroup] {
    override def encode(_item: RowGroup, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): RowGroup = RowGroup.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[RowGroup] = RowGroup.metaData
  }

  /**
   * The default read-only implementation of RowGroup.  You typically should not need to
   * directly reference this class; instead, use the RowGroup.apply method to construct
   * new instances.
   */
  class Immutable(
      val columns: Seq[parquet.format.ColumnChunk],
      val totalByteSize: Long,
      val numRows: Long,
      val sortingColumns: _root_.scala.Option[Seq[parquet.format.SortingColumn]],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends RowGroup {
    def this(
      columns: Seq[parquet.format.ColumnChunk] = Seq[parquet.format.ColumnChunk](),
      totalByteSize: Long,
      numRows: Long,
      sortingColumns: _root_.scala.Option[Seq[parquet.format.SortingColumn]] = _root_.scala.None
    ) = this(
      columns,
      totalByteSize,
      numRows,
      sortingColumns,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val columns: Seq[parquet.format.ColumnChunk],
      val totalByteSize: Long,
      val numRows: Long,
      val sortingColumns: _root_.scala.Option[Seq[parquet.format.SortingColumn]],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends RowGroup {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }


    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the RowGroup trait with additional state or
   * behavior and implement the read-only methods from RowGroup using an underlying
   * instance.
   */
  trait Proxy extends RowGroup {
    protected def _underlying_RowGroup: RowGroup
    override def columns: Seq[parquet.format.ColumnChunk] = _underlying_RowGroup.columns
    override def totalByteSize: Long = _underlying_RowGroup.totalByteSize
    override def numRows: Long = _underlying_RowGroup.numRows
    override def sortingColumns: _root_.scala.Option[Seq[parquet.format.SortingColumn]] = _underlying_RowGroup.sortingColumns
    override def _passthroughFields = _underlying_RowGroup._passthroughFields
  }
}

/**
 * Prefer the companion object's [[parquet.format.RowGroup.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait RowGroup
  extends ThriftStruct
  with _root_.scala.Product4[Seq[parquet.format.ColumnChunk], Long, Long, Option[Seq[parquet.format.SortingColumn]]]
  with HasThriftStructCodec3[RowGroup]
  with java.io.Serializable
{
  import RowGroup._

  def columns: Seq[parquet.format.ColumnChunk]
  def totalByteSize: Long
  def numRows: Long
  def sortingColumns: _root_.scala.Option[Seq[parquet.format.SortingColumn]]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = columns
  def _2 = totalByteSize
  def _3 = numRows
  def _4 = sortingColumns

  def toTuple: _root_.scala.Tuple4[Seq[parquet.format.ColumnChunk], Long, Long, Option[Seq[parquet.format.SortingColumn]]] = {
    (
      columns,
      totalByteSize,
      numRows,
      sortingColumns
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (columns ne null) {
                writeColumnsValue(columns, _oprot)
                _root_.scala.Some(RowGroup.ColumnsField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (true) {
                writeTotalByteSizeValue(totalByteSize, _oprot)
                _root_.scala.Some(RowGroup.TotalByteSizeField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (true) {
                writeNumRowsValue(numRows, _oprot)
                _root_.scala.Some(RowGroup.NumRowsField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (sortingColumns.isDefined) {
                writeSortingColumnsValue(sortingColumns.get, _oprot)
                _root_.scala.Some(RowGroup.SortingColumnsField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): RowGroup = {
    var columns: Seq[parquet.format.ColumnChunk] = this.columns
    var totalByteSize: Long = this.totalByteSize
    var numRows: Long = this.numRows
    var sortingColumns: _root_.scala.Option[Seq[parquet.format.SortingColumn]] = this.sortingColumns
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        columns = readColumnsValue(_blob.read)
      case 2 =>
        totalByteSize = readTotalByteSizeValue(_blob.read)
      case 3 =>
        numRows = readNumRowsValue(_blob.read)
      case 4 =>
        sortingColumns = _root_.scala.Some(readSortingColumnsValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      columns,
      totalByteSize,
      numRows,
      sortingColumns,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): RowGroup = {
    var columns: Seq[parquet.format.ColumnChunk] = this.columns
    var totalByteSize: Long = this.totalByteSize
    var numRows: Long = this.numRows
    var sortingColumns: _root_.scala.Option[Seq[parquet.format.SortingColumn]] = this.sortingColumns

    _fieldId match {
      case 1 =>
        columns = Seq[parquet.format.ColumnChunk]()
      case 2 =>
        totalByteSize = 0L
      case 3 =>
        numRows = 0L
      case 4 =>
        sortingColumns = _root_.scala.None
      case _ =>
    }
    new Immutable(
      columns,
      totalByteSize,
      numRows,
      sortingColumns,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetColumns: RowGroup = unsetField(1)

  def unsetTotalByteSize: RowGroup = unsetField(2)

  def unsetNumRows: RowGroup = unsetField(3)

  def unsetSortingColumns: RowGroup = unsetField(4)


  override def write(_oprot: TProtocol): Unit = {
    RowGroup.validate(this)
    _oprot.writeStructBegin(Struct)
    if (columns ne null) writeColumnsField(columns, _oprot)
    writeTotalByteSizeField(totalByteSize, _oprot)
    writeNumRowsField(numRows, _oprot)
    if (sortingColumns.isDefined) writeSortingColumnsField(sortingColumns.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    columns: Seq[parquet.format.ColumnChunk] = this.columns,
    totalByteSize: Long = this.totalByteSize,
    numRows: Long = this.numRows,
    sortingColumns: _root_.scala.Option[Seq[parquet.format.SortingColumn]] = this.sortingColumns,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): RowGroup =
    new Immutable(
      columns,
      totalByteSize,
      numRows,
      sortingColumns,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[RowGroup]

  private def _equals(x: RowGroup, y: RowGroup): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator)

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[RowGroup]) &&
      _passthroughFields == other.asInstanceOf[RowGroup]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => this.columns
    case 1 => this.totalByteSize
    case 2 => this.numRows
    case 3 => this.sortingColumns
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "RowGroup"

  def _codec: ThriftStructCodec3[RowGroup] = RowGroup
}

